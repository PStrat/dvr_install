#!/bin/sh

### This script will be executed when package installed and upgraded.
### Actions after package installed.
### ex. create database, create symbolic link...


#Useful Environment Variables
# SYNOPKG_PKGNAME     - Package Name from INFO
# SYNOPKG_PKGVER      - Package Version from INFO
# SYNOPKG_PKGDEST     - Target directory for storage of the package
# SYNOPKG_PKGDEST_VOL - Target Volume where package is stored
# SYNOPKG_PKGPORT     - Admin Port as defined in INFO

# SYNOPKG_TEMP_UPGRADE_FOLDER - Temp folder for moving data to/from between preupgrade and postupgrade
# SYNOPKG_TEMP_LOGFILE        - Temporary logfile for scripts to log to

hdhr_web_path="$SYNOPKG_PKGDEST/web"
hdhr_bin_path="$SYNOPKG_PKGDEST/bin"
hdhr_etc_path="$SYNOPKG_PKGDEST/etc"
syno_web_path="/var/services/web/HDHomeRunDVR"
hdhr_bin="hdhomerun_record_linux"
hdhr_conf="HDHomeRunDVR.conf"
http_user="http:http"
hdhr_user="http"
hdhr_wrap_arm="hdhr_wrapper_arm7"
hdhr_wrap_x86="hdhr_wrapper_x86_64"
arch=`uname -m`
hdhr_arch_log=/tmp/hdhr_arch_choice

create_web_ui() {
	cp -R $hdhr_web_path $syno_web_path
	chown -R http:http $syno_web_path
	chmod -R 755 $syno_web_path
}

delete_web_ui() {
	rm -rf $syno_web_path
}

update_vars_file() {
	sed -i "s!\(DVRUI_version\s*=\).*!\1\"$SYNOPKG_PKGVER\";!" $syno_web_path/vars.php
	sed -i "s!\(DVR_pkgPath\s*=\).*!\1\"$SYNOPKG_PKGDEST\";!" $syno_web_path/vars.php
}

backup_conf_file() {
	cp $hdhr_etc_path/$hdhr_conf $SYNOPKG_TEMP_UPGRADE_FOLDER
}

restore_conf_file() {
	cp $SYNOPKG_TEMP_UPGRADE_FOLDER/$hdhr_conf $hdhr_etc_path
}

create_recordings_path() {
	RECORDING_PATH="$SYNOPKG_PKGDEST_VOL/$SYNOPKG_PKGNAME"
	if [ ! -d $RECORDING_PATH ] ; then
		mkdir $RECORDING_PATH
	fi
	sed -i "s!\(RecordPath\s*=\).*!\1$RECORDING_PATH!" $hdhr_etc_path/$hdhr_conf
	chown -R http:http $RECORDING_PATH
	chmod -R u+w $RECORDING_PATH
}

adjust_permissions() {
	chown $http_user $hdhr_etc_path/$hdhr_conf
	chown $http_user $hdhr_bin_path/$hdhr_bin
}

remove_recordings_path() {
	echo "Does Nothing - leave removing the dir to the user"
}

precheck_record_normal() {
  . $hdhr_etc_path/$hdhr_conf
  echo "Checking RecordPath ${RecordPath} writable for ${EUID} .... " >> $hdhr_arch_log
  if [[ -w ${RecordPath}/precheck ]] ; then
    echo "${RecordPath}/precheck already exists and is writeable - attempt to remove" >> $hdhr_arch_log
    precheck_remove_file_root
    if [[ -e ${RecordPath}/precheck ]] ; then
	    echo "Unable to remove ${RecordPath}/precheck " >> $hdhr_arch_log
	  else
	  	precheck_create_file_root
	  	if [[ -e ${RecordPath}/precheck ]] ; then
				echo "Success for root creating ${RecordPath}/precheck " >> $hdhr_arch_log
	  	fi
	    precheck_remove_file_root
    fi
  elif [[ -e ${RecordPath}/precheck ]] ; then
    echo "${RecordPath}/precheck already exists and is not writable by ${EUID}" >> $hdhr_arch_log
    echo "Scripts unable to resolve - please resolve manually to remove" >> $hdhr_arch_log
	else
	  	precheck_create_file_root
	  	if [[ -e ${RecordPath}/precheck ]] ; then
				echo "Success for root creating ${RecordPath}/precheck " >> $hdhr_arch_log
	  	fi
	    precheck_remove_file_root
	fi  
}

precheck_create_file_root() {
 	echo "Attempting to create ${RecordPath}/precheck as ${EUID}"  >> $hdhr_arch_log
 	/bin/touch ${RecordPath}/precheck
}

precheck_remove_file_root() {
 	echo "Attempting to remove ${RecordPath}/precheck as ${EUID}"  >> $hdhr_arch_log
	/bin/rm ${RecordPath}/precheck
}

precheck_create_file_user() {
 	echo "Attempting to create ${RecordPath}/precheck as ${hdhr_user}" >> $hdhr_arch_log
	$hdhr_bin_path/$hdhr_wrap -u $hdhr_user -b /bin/touch -- ${RecordPath}/precheck
}

precheck_remove_file_user() {
 	echo "Attempting to remove ${RecordPath}/precheck as ${hdhr_user}" >> $hdhr_arch_log
	$hdhr_bin_path/$hdhr_wrap -u $hdhr_user -b /bin/rm -- ${RecordPath}/precheck
}

precheck_record_wrap() {
  . $hdhr_etc_path/$hdhr_conf
  echo "Checking RecordPath ${RecordPath} exists.... " >> $hdhr_arch_log
  if [[ -d ${RecordPath} ]] ; then
    echo "${RecordPath} exists and is a dir or symlink" >> $hdhr_arch_log
  fi  

	# Attempt to write precheck as root user.
	precheck_record_normal

  echo "Checking RecordPath ${RecordPath} writable for user ${hdhr_user}.... " >> $hdhr_arch_log
  if [[ -w ${RecordPath}/precheck ]] ; then
    echo "${RecordPath}/precheck already exists and is writable" >> $hdhr_arch_log
    precheck_remove_file_user
    if [[ -e ${RecordPath}/precheck ]] ; then
    	echo "User ${hdhr_user} is unable to remove ${RecordPath}/precheck " >> $hdhr_arch_log
  	else
	  	precheck_create_file_user
	  	if [[ -e ${RecordPath}/precheck ]] ; then
				echo "Success for user ${hdhr_user} creating ${RecordPath}/precheck " >> $hdhr_arch_log
	  	fi
	    precheck_remove_file_user
    fi
  elif [[ -e ${RecordPath}/precheck ]] ; then
    echo "${RecordPath}/precheck already exists and is not writable" >> $hdhr_arch_log
    echo "Scripts unable to resolve - please resolve manually to remove" >> $hdhr_arch_log
  else
	  	precheck_create_file_user
	  	if [[ -e ${RecordPath}/precheck ]] ; then
				echo "Success for user ${hdhr_user} creating ${RecordPath}/precheck " >> $hdhr_arch_log
	  	fi
	    precheck_remove_file_user
  fi
}


start_engine() {
  echo "==========================="  >> $hdhr_arch_log
  echo "Starting Engine: $currentTS"  >> $hdhr_arch_log
  if [[ $EUID -eq 0 ]]; then
    if [[ "$arch" =~ "arm"* ]]; then
      echo "Determined Platform is ARM from $arch" >> $hdhr_arch_log
      hdhr_wrap=$hdhr_wrap_arm
    elif [[ "$arch" =~ "x86_64"* ]]; then
      echo "Determined Platform is x86_64 from $arch" >> $hdhr_arch_log
      hdhr_wrap=$hdhr_wrap_x86
    else
      echo "Platform not handled from  $arch" >> $hdhr_arch_log
    fi
    if [[ ! -z $hdhr_wrap ]]; then
      precheck_record_wrap
      echo "Starting Engine with wrapper ${hdhr_wrap} for user ${hdhr_user}" >> $hdhr_arch_log
      $hdhr_bin_path/$hdhr_wrap -u $hdhr_user -b $hdhr_bin_path/$hdhr_bin -- start --conf $hdhr_etc_path/$hdhr_conf
    else
      echo "Arch unknown - Starting Engine normally" >> $hdhr_arch_log
      precheck_record_normal
      $hdhr_bin_path/$hdhr_bin start --conf $hdhr_etc_path/$hdhr_conf
    fi
  else
    echo "Not root user, starting Engine normally" >> $hdhr_arch_log
    precheck_record_normal
    $hdhr_bin_path/$hdhr_bin start --conf $hdhr_etc_path/$hdhr_conf
  fi

}

stop_engine() {
	$hdhr_bin_path/$hdhr_bin stop
}

status_engine() {
	$hdhr_bin_path/$hdhr_bin version
	$hdhr_bin_path/$hdhr_bin status
}

